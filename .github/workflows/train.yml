name: Model Training

on:
  workflow_dispatch:
    inputs:
      iterations:
        description: 'iterations'
        required: true
        default: 100
        type: number
      simulation:
        description: 'simulation'
        required: true
        default: 50
        type: number
      cpuct:
        description: 'cpuct'
        required: true
        default: 1.0
        type: number
      temperature:
        description: 'temperature'
        required: true
        default: 1.0
        type: number
      batch:
        description: 'batch'
        required: true
        default: 10
        type: number
      epochs:
        description: 'epochs'
        required: true
        default: 10
        type: number

jobs:
  train:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest]
        build_type: [Release]
        c_compiler: [gcc]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Train
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: bin/surakarta-alphazero-train model.bin              \
            --iterations ${{ github.event.inputs.iterations }}  \
            --simulation ${{ github.event.inputs.simulation }}  \
            --cpuct ${{ github.event.inputs.cpuct }}            \
            --temperature ${{ github.event.inputs.temperature }}\
            --batch ${{ github.event.inputs.batch }}            \
            --epochs ${{ github.event.inputs.epochs }}

    - name: Upload Model
      uses: actions/upload-artifact@v4
      with:
        name: model
        path: ${{ steps.strings.outputs.build-output-dir }}/model.bin
